// some list functions (might not be necessary anymore...)
@import 'partials/SassyLists';

$dark_gray: #b2b2b2;
$gbm_red: #d20000;

//$brick_bg:lightSlateGray;

// list of items with image backgrounds
$furniture_items: box, table, couch, bed-left, bed-right, beds-left, beds-right; 

$couch_radius_first: 6px 0 0 0;
$couch_radius_last: 0 6px 0 0;
$beds_radius_headboard: 5px 5px 0 0;
$beds_radius_foot: 0 5px 0 0;
$beds_radius_foot_left: 5px 0 0 0;

// brick size
$brick_wh: 34px;

$box_bg_positions: 0px 0px, 0px -34px, -34px -34px, -34px 0px;
$box_bg_position_refs: 1, 4, 2, 3;

// center mixin

@mixin center {
  margin: 0 auto;
}

@mixin clearfix {
  &:after {
    content: "";
    display: table;
    clear: both;
  }
}

#tetris {
  @include clearfix;
  transform: rotate(-90deg);
  max-width: 670px;
}

body {overflow:hidden; background: #d7d7d7;}
#tetris {
}
#canvas {
  width: 340px;
  height: 680px;
  background-color: #fff;
  position: relative;
  color: #fff;
  float:left;
}
#canvas h1 {margin: 0; padding: 0; text-align: center; font-size: 30px; padding-top: 200px;}
.piece {
  border: 1px solid white;
  position: absolute;
}
#next_shape {
  position: relative;
  background-color: #fff;
  border: 1px solid white;
  width: $brick_wh*6;
  height: $brick_wh*4;
  @include center;
}
#info {
  background-color: $gbm_red; 
  color: #fff; 
  float: left;
  height: 660px;
  padding: 10px;
  width: 205px;
  #stats p {
    position: relative;
    transform: rotate(90deg);
    text-align: center;
    margin: 20px 0;
    font-size: 26px;
    text-transform: uppercase;
    font-family: sans-serif;
    color: $dark_gray;
    text-shadow: 2px 1px 0px #fff, 6px 2px 0px rgba(0,0,0,0.15);
  }
}
p#level {
  left: 60px;
  top: 39px; }

p#lines {
  left: 20px;
  top: -13px; }

p#score {
  left: -20px;
  top: -48px; }

p#time {
  left: -60px;
  top: -114px; }


@function set_bg_position_initial($piece, $slice) {

  $xy_pos:'';

  @if $piece == couch {
    $xy_pos: -$brick_wh*( 8 + $slice ) 0px; 
  }
  @else if $piece == bed-left or $piece == bed-right {
    @if $slice == 0 {
      @if $piece == bed-left {
        $xy_pos: -$brick_wh*4 0px;
      } @else {
        $xy_pos: -$brick_wh*5 0px;
      } 
    }@else{
      @if $piece == bed-left {
        $xy_pos: -$brick_wh*(1 + $slice)  -34px;
      } @else {
        $xy_pos: -$brick_wh*(4 + $slice)   -34px;
      }
    }
  } 
  @return $xy_pos;
}

@function set_bg_pos_rotate($piece, $slice, $rotation, $bg_coords, $shifted_bg_list) {

  @if $piece == couch {

    @return $bg_coords;

  } @else if $piece == box {

    @return nth($shifted_bg_list, $rotation + 1);
  }
  @return $bg_coords;
}

@function set_transform_val($piece, $rotation){

  $transform_val:'';
  @if $piece == table { 
    $transform_val: rotate( (90deg*($rotation + 2))%360 ); 
  }
  @else { $transform_val: rotate( 90deg*($rotation) ); }

  @return $transform_val;

}

.square {
  //background-color: $brick_bg;
  position: absolute;
  width: $brick_wh;
  height: $brick_wh;
}

@each $item in $furniture_items {

  @for $slice from 0 through 3 {

    $tmp_list:();
    $shape_positions:(1,2,3,4);
    $shape_ref_array:(1,2,3,4);

    .icon-sprite-#{$item}-#{$slice}{

      background-image: url('../img/spritesheet.png');

      @if ($slice == 0 and $item == couch) { border-radius: $couch_radius_first;}
      @if ($slice == 3 and $item == couch) { border-radius: $couch_radius_last;}
      @if ($slice == 0 and ($item == bed-left or $item == bed-right) ) { border-radius: $beds_radius_headboard;}
      @if ($slice == 3 and $item == bed-right ) { border-radius: $beds_radius_foot;}
      @if ($slice == 1 and $item == bed-left) { border-radius: $beds_radius_foot_left;}


      $bg_pos: set_bg_position_initial($item, $slice);

      @if ( $item == box ) {
        $shape_positions: $box_bg_positions;
        $shape_ref_array: $box_bg_position_refs;
      }

      $tmp_list: join(slice($shape_positions, nth($shape_ref_array, $slice + 1)), slice($shape_positions, 1, nth($shape_ref_array, $slice+ 1)));

      @for $rotation from 0 through 3{
        &.rot-#{$rotation}{
          transform: set_transform_val($item, $rotation);
          background-position: set_bg_pos_rotate($item, $slice, $rotation, $bg_pos, $tmp_list); 
        }
      }
    }
  }
}
